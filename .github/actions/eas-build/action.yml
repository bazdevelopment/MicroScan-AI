# ‚úçÔ∏è Description:
# This is a composite action, which means it can be used in other actions.
# This action is used to trigger an EAS Build for a specific environment (development, staging, production).
# This action accepts those inputs:
#        `APP_ENV`, which is used to generate an APK for a specific environment (development, staging, production). We use development by default.
#        `AUTO_SUBMIT`, false by default, set to true if you want to automatically submit your build to stores.
#        `EXPO_TOKEN`, required, access token for your Expo account. https://expo.dev/settings/access-tokens
#        `VERSION`, required, version of the app to build. used as the build message.
#        `ANDROID`, true by default, set to true if you don't want to trigger build for Android.
#        `IOS`, false by default, set to true if you  want to trigger build for IOS.

# Before triggering the build, we run a pre-build script to generate the necessary native folders based on the APP_ENV.
# Based on the ANDROID and IOS inputs, we trigger the build for the corresponding platform with the corresponding flags.

# üëÄ Example usage:
#      - name: ‚è±Ô∏è EAS Build
#        uses: ./.github/actions/eas-build
#        with:
#          APP_ENV: development
#          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
#          VERSION: ${{ github.event.release.tag_name }}
#          IOS: false

name: 'Setup EAS Build + Trigger Build'
description: 'Setup EAS Build + Trigger Build'
inputs:
  APP_ENV:
    description: 'APP_ENV (one of): development, production'
    required: true
    default: 'development'
  AUTO_SUBMIT: ## TODO: we need to handle this too
    description: 'AUTO_SUBMIT (one of): true, false'
    required: true
    default: 'false'
  ANDROID:
    description: 'run for ANDROID (one of): true, false'
    required: true
    default: 'true'
  VERSION:
    description: 'VERSION'
    required: true
    default: '0.0.0'
  IOS:
    description: 'run for IOS (one of): true, false'
    required: true
    default: 'false'
  EXPO_TOKEN:
    description: 'EXPO_TOKEN'
    required: true
    default: 'false'
  FIREBASE_APP_ID_IOS:
    description: 'FIREBASE_APP_ID_IOS'
    required: true
  FIREBASE_APP_ID_ANDROID:
    description: 'FIREBASE_APP_ID_ANDROID'
    required: true
  CREDENTIAL_FILE_CONTENT_GOOGLE_KEY:
    description: 'CREDENTIAL_FILE_CONTENT_GOOGLE_KEY'
    required: true
  SHOULD_SUBMIT:
    description: 'Enable EAS Submit step'
    required: true
    default: 'false'
  REVENUE_CAT_API_KEYS_GOOGLE:
    description: 'REVENUE_CAT_API_KEYS_GOOGLE'
    required: true
  REVENUE_CAT_API_KEYS_APPLE:
    description: 'REVENUE_CAT_API_KEYS_APPLE'
    required: true
  TEST_ACCOUNT:
    description: 'TEST_ACCOUNT'
    required: true

  ANALYZE_IMAGE_CONVERSATION_ENDPOINT:
    description: 'ANALYZE_IMAGE_CONVERSATION_ENDPOINT'
    required: true
  ANALYZE_VIDEO_CONVERSATION_ENDPOINT:
    description: ' ANALYZE_VIDEO_CONVERSATION_ENDPOINT'
    required: true
  CONTINUE_CONVERSATION_ENDPOINT:
    description: 'CONTINUE_CONVERSATION_ENDPOINT'
    required: true

runs:
  using: 'composite'
  steps:
    - name: üíØ Check for EXPO_TOKEN
      run: |
        if [ -z "${{ inputs.EXPO_TOKEN }}" ]; then
          echo "You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions"
          exit 1
        fi
      shell: bash

    - name: üì¶ Setup Expo and EAS
      uses: expo/expo-github-action@v8
      with:
        eas-version: latest
        token: ${{ inputs.EXPO_TOKEN }}

    - name: ‚öôÔ∏è Run Prebuild
      run: |
        pnpm prebuild:${{ inputs.APP_ENV }}
      shell: bash

    - name: Update EAS JSON env variables used in the app
      run: |
        # Debug: Print inputs to verify they are not empty
         echo "REVENUE_CAT_API_KEYS_GOOGLE: ${{ inputs.REVENUE_CAT_API_KEYS_GOOGLE }}"
         echo "REVENUE_CAT_API_KEYS_APPLE: ${{ inputs.REVENUE_CAT_API_KEYS_APPLE }}"
         echo "TEST_ACCOUNT: ${{ inputs.TEST_ACCOUNT }}"
         echo "ANALYZE_IMAGE_CONVERSATION_ENDPOINT: ${{ inputs.ANALYZE_IMAGE_CONVERSATION_ENDPOINT }}"
         echo "ANALYZE_VIDEO_CONVERSATION_ENDPOINT: ${{ inputs.ANALYZE_VIDEO_CONVERSATION_ENDPOINT }}"
         echo "CONTINUE_CONVERSATION_ENDPOINT: ${{ inputs.CONTINUE_CONVERSATION_ENDPOINT }}"

         # Detect OS and use appropriate sed syntax (ios use sed -i '')
         if [[ "$OSTYPE" == "darwin"* ]]; then
         # Use sed to replace placeholders in eas.json
         sed -i '' "s|EXPO_PUBLIC_REVENUE_CAT_API_KEYS_GOOGLE_CI|${{ inputs.REVENUE_CAT_API_KEYS_GOOGLE }}|g" eas.json
         sed -i '' "s|EXPO_PUBLIC_REVENUE_CAT_API_KEYS_APPLE_CI|${{ inputs.REVENUE_CAT_API_KEYS_APPLE }}|g" eas.json
         sed -i '' "s|EXPO_PUBLIC_ANALYZE_IMAGE_CONVERSATION_ENDPOINT_CI|${{ inputs.ANALYZE_IMAGE_CONVERSATION_ENDPOINT }}|g" eas.json
         sed -i '' "s|EXPO_PUBLIC_ANALYZE_VIDEO_CONVERSATION_ENDPOINT_CI|${{ inputs.ANALYZE_VIDEO_CONVERSATION_ENDPOINT }}|g" eas.json
         sed -i '' "s|EXPO_PUBLIC_CONTINUE_CONVERSATION_ENDPOINT_CI|${{ inputs.CONTINUE_CONVERSATION_ENDPOINT }}|g" eas.json

         else
         sed -i 's|EXPO_PUBLIC_REVENUE_CAT_API_KEYS_GOOGLE_CI|${{ inputs.REVENUE_CAT_API_KEYS_GOOGLE }}|g' eas.json
         sed -i 's|EXPO_PUBLIC_REVENUE_CAT_API_KEYS_APPLE_CI|${{ inputs.REVENUE_CAT_API_KEYS_APPLE }}|g' eas.json
         sed -i 's|EXPO_PUBLIC_ANALYZE_IMAGE_CONVERSATION_ENDPOINT_CI|${{ inputs.ANALYZE_IMAGE_CONVERSATION_ENDPOINT }}|g' eas.json
         sed -i 's|EXPO_PUBLIC_ANALYZE_VIDEO_CONVERSATION_ENDPOINT_CI|${{ inputs.ANALYZE_VIDEO_CONVERSATION_ENDPOINT }}|g' eas.json
         sed -i 's|EXPO_PUBLIC_CONTINUE_CONVERSATION_ENDPOINT_CI|${{ inputs.CONTINUE_CONVERSATION_ENDPOINT }}|g' eas.json

         fi
      shell: bash

    - name: Log Updated eas.json
      run: |
        cat eas.json
      shell: bash

    - name: üì± Run Android Build
      if: ${{ inputs.ANDROID == 'true' }}
      run: pnpm build:${{ inputs.APP_ENV }}:android --local  --non-interactive  --no-wait  --output=${{ github.workspace }}/${{ inputs.VERSION }}.apk  --message "Build  ${{ inputs.APP_ENV }} ${{ inputs.VERSION }}"
      shell: bash

    - name: üì± Run IOS Build
      if: ${{ inputs.IOS == 'true' }}
      run: pnpm build:${{ inputs.APP_ENV }}:ios  --local --non-interactive --output=${{ github.workspace }}/${{ inputs.VERSION }}.ipa  --no-wait --message "Build ${{ inputs.APP_ENV }} ${{ inputs.VERSION }}"
      shell: bash

    - name: üèÅ Upload IPA artifact IOS
      if: ${{ inputs.IOS == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.VERSION }}-IOS
        path: ${{ github.workspace }}/${{ inputs.VERSION }}.ipa

    - name: üèÅ Upload APK artifact ANDROID
      if: ${{ inputs.ANDROID == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.VERSION }}-ANDROID
        path: ${{ github.workspace }}/${{ inputs.VERSION }}.apk

    # New EAS Submit steps
    - name: üöÄ Submit Android to Play Store
      if: ${{ inputs.ANDROID == 'true' && inputs.SHOULD_SUBMIT == 'true' }}
      run: eas submit --platform android --path ${{ github.workspace }}/${{ inputs.VERSION }}.apk --non-interactive
      shell: bash

    - name: üöÄ Submit iOS to App Store
      if: ${{ inputs.IOS == 'true' && inputs.SHOULD_SUBMIT == 'true' }}
      run: eas submit --platform ios --path ${{ github.workspace }}/${{ inputs.VERSION }}.ipa --non-interactive
      shell: bash

    - name: Deploy to Firebase - APK
      if: ${{ inputs.ANDROID == 'true' && inputs.SHOULD_SUBMIT != 'true' }}
      uses: ./.github/actions/deploy-to-firebase
      with:
        PATH: /home/runner/work/MicroScan-AI/MicroScan-AI
        VERSION: ${{ inputs.VERSION }}
        FIREBASE_APP_ID: ${{ inputs.FIREBASE_APP_ID_ANDROID }}
        CREDENTIAL_FILE_CONTENT_GOOGLE_KEY: ${{ inputs.CREDENTIAL_FILE_CONTENT_GOOGLE_KEY }}

    - name: Deploy to Firebase - IPA
      if: ${{ inputs.IOS == 'true' && inputs.SHOULD_SUBMIT != 'true' }}
      uses: ./.github/actions/deploy-to-firebase
      with:
        PATH: /Users/runner/work/MicroScan-AI/MicroScan-AI
        VERSION: ${{ inputs.VERSION }}
        FIREBASE_APP_ID: ${{ inputs.FIREBASE_APP_ID_IOS }}
        CREDENTIAL_FILE_CONTENT_GOOGLE_KEY: ${{ inputs.CREDENTIAL_FILE_CONTENT_GOOGLE_KEY }}
