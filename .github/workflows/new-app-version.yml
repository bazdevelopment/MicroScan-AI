# ‚úçÔ∏è Description:
# This workflow is used to create a new version of the app and push a new tag to the repo.
# As this workflow will push code to the repo, we set up GitHub Bot as a Git user.
# This Workflow need to be triggered manually from the Actions tab in the repo.
#         1. Choose your release type (patch, minor, major)
#         2. The workflow will run the np-release script which runs the following steps:
#             - Bump the version in package.json based on the release type using np
#             - Run the prebuild of the app to align the package.json version with the native code
#             - Create a new tag with the new version
#             - Push the new tag to the repo
#

# üö® GITHUB SECRETS REQUIRED:
#         - GH_TOKEN: A GitHub token with write repo access.
#           You can generate one from here: https://docs.github.com/en/enterprise-server@3.6/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
#           make sure to add it to the repo secrets with the name GH_TOKEN

name: New App Version

on:
  workflow_dispatch:
    inputs:
      # release-type:
      #   type: choice
      #   description: 'Release type (one of): major, minor, path'
      #   default: ' '
      #   required: false
      #   options:
      #     - major
      #     - minor
      #     - patch
      #     - ' '

      new-app-version:
        type: string
        description: |
          **Rules:**

          Production build => 24.10.2 (Ensure that the version is unique and does not contain any suffixes, this cannot be uploaded to Firebase App Distribution); 
          Staging build -> e.g. 24.10.1-staging."
          Development build -> e.g. 24.10.1-dev;

        required: false
        default: ''

      environment:
        type: choice
        description: 'Environment type (one of): development, production'
        required: true
        default: 'development'
        options:
          - development
          - production
          - staging

      run_ios:
        type: choice
        description: Run IOS build?
        required: true
        default: 'true'
        options:
          - true
          - false

      run_android:
        type: choice
        description: Run Android build?
        required: true
        default: 'true'
        options:
          - true
          - false

      should_submit:
        type: choice
        description: Whether to perform the EAS submit step
        required: true
        default: 'false'
        options:
          - true
          - false

jobs:
  release:
    name: Create New Version and push new tag
    runs-on: ubuntu-latest
    environment: ${{ fromJSON('{"staging":"production"}')[inputs.environment] || inputs.environment }}
    permissions:
      contents: write
    steps:
      - name: Validate inputs
        id: validate-inputs
        run: |
          if [ -z "${{ github.event.inputs.release-type }}" ] && [ -z "${{ github.event.inputs.new-app-version }}" ]; then
           echo "Error: No release type or version provided. At least one must be specified."
           exit 1
          fi

      - name: üîç GH_TOKEN
        if: env.GH_TOKEN == ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        run: echo "GH_TOKEN=${GITHUB_TOKEN}" >> $GITHUB_ENV
      - name: üì¶ Checkout project repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: üìù Git User Setup
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: üì¶ Setup Node + PNPM + install deps
        uses: ./.github/actions/setup-node-pnpm-install

      - name: 'Load environment variables'
        run: |
          # Define the environment file name based on the input environment
          if [ "${{ inputs.environment }}" == "staging" ]; then
            ENV_FILE=".env.production"
          else
            ENV_FILE=".env.${{ inputs.environment }}"
          fi

          # Create the environment file (use $ENV_FILE variable)
          touch $ENV_FILE

           # Export Google Services JSON secrets to the GitHub environment
           echo "GOOGLE_SERVICES_JSON_ANDROID_BASE64=${{ secrets.GOOGLE_SERVICES_JSON_ANDROID_BASE64 }}" >> $GITHUB_ENV
           echo "GOOGLE_SERVICES_PLIST_IOS_BASE64=${{ secrets.GOOGLE_SERVICES_PLIST_IOS_BASE64 }}" >> $GITHUB_ENV

           # Append environment variables to the defined env file
           echo "GOOGLE_SERVICES_JSON_PATH=${{ vars.GOOGLE_SERVICES_JSON_PATH }}" >> $ENV_FILE
           echo "GOOGLE_SERVICES_PLIST_PATH=${{ vars.GOOGLE_SERVICES_PLIST_PATH }}" >> $ENV_FILE
           echo "ANTHROPIC_API_KEY=${{secrets.ANTHROPIC_API_KEY}}" >> $ENV_FILE
           echo "RESEND_API_KEY=${{secrets.RESEND_API_KEY}}" >> $ENV_FILE
           echo "RESEND_SENDER_EMAIL=${{secrets.RESEND_SENDER_EMAIL}}" >> $ENV_FILE
           echo "TEST_ACCOUNT=${{secrets.TEST_ACCOUNT}}" >> $ENV_FILE
           echo "REVENUE_CAT_API_KEYS_GOOGLE=${{secrets.REVENUE_CAT_API_KEYS_GOOGLE}}" >> $ENV_FILE
           echo "REVENUE_CAT_API_KEYS_APPLE=${{secrets.REVENUE_CAT_API_KEYS_APPLE}}" >> $ENV_FILE
           echo "ANALYZE_IMAGE_ENDPOINT=${{secrets.ANALYZE_IMAGE_ENDPOINT}}" >> $ENV_FILE
           echo "ANALYZE_VIDEO_ENDPOINT=${{secrets.ANALYZE_VIDEO_ENDPOINT}}" >> $ENV_FILE
           echo "EXPO_PUBLIC_TEST_URL=${{secrets.EXPO_PUBLIC_TEST_URL}}" >> $ENV_FILE

           # Log the contents of the .env file for debugging
           echo "Contents of $ENV_FILE:"
           cat $ENV_FILE

      - name: üßë‚Äçüíª Decode google services
        run: pnpm run decode-google-services

      # - name: Update EAS Config
      #   run: |
      #     sed -i 's|WILL_BE_REPLACED_IN_CI|${{ secrets.EXPO_PUBLIC_TEST_URL }}|g' eas.json
      #   shell: bash

      - name: üèÉ‚Äç‚ôÇÔ∏è Align native code with version changes by running prebuild
        run: |
          if [ "${{ inputs.environment }}" = "development" ]; then
          echo "Running prebuild-push:development for the ${{
           inputs.environment }} environment"
          pnpm prebuild-push:development
          elif [ "${{ inputs.environment }}" = "production" ]; then
          echo "Running prebuild-push:production for the ${{
           inputs.environment }} environment"
          pnpm prebuild-push:production
          elif [ "${{ inputs.environment }}" = "staging" ]; then
          echo "Running prebuild-push:staging for the ${{
           inputs.environment }} environment"
          pnpm prebuild-push:staging
          else
          echo "Unknown environment: ${{ inputs.environment }}. No prebuild-push executed."
          fi

  create_github_release:
    needs: release
    uses: ./.github/workflows/new-github-release.yml
    with:
      version: ${{ inputs.new-app-version }} # Pass the version
    permissions:
      contents: write # Add permissions here
    secrets: inherit

  build:
    needs: ['create_github_release', 'release']
    if: ${{ inputs.environment == 'production' }}
    uses: ./.github/workflows/eas-build-production.yml
    with:
      environment: ${{ inputs.environment }}
      run_ios: ${{ inputs.run_ios == 'true' }}
      run_android: ${{ inputs.run_android == 'true' }}
      should_submit: ${{ inputs.should_submit == 'true' }}
      version: ${{ inputs.new-app-version }}
    secrets: inherit

  build_staging:
    needs: ['create_github_release', 'release']
    if: ${{ inputs.environment == 'staging' }}
    uses: ./.github/workflows/eas-build-staging.yml
    with:
      environment: ${{ inputs.environment }}
      run_ios: ${{ inputs.run_ios == 'true' }}
      run_android: ${{ inputs.run_android == 'true' }}
      should_submit: ${{ inputs.should_submit == 'true' }}
      version: ${{ inputs.new-app-version }}
    secrets: inherit

  build_development:
    needs: ['create_github_release', 'release']
    if: ${{ inputs.environment == 'development' }}
    uses: ./.github/workflows/eas-build-development.yml
    with:
      environment: ${{ inputs.environment }}
      run_ios: ${{ inputs.run_ios == 'true' }}
      run_android: ${{ inputs.run_android == 'true' }}
      should_submit: ${{ inputs.should_submit == 'true' }}
      version: ${{ inputs.new-app-version }}
    secrets: inherit
