# ‚úçÔ∏è Description:
# This workflow is used to trigger a build on EAS for the production environment.
# It will run on every GitHub release published on the repo or can be triggered manually from the actions tab.
# This workflow will use ./actions/eas-build action to trigger the build on EAS with staging env.

# üö® GITHUB SECRETS REQUIRED:
#         - EXPO_TOKEN: Expo token to authenticate with EAS
#         - You can get it from https://expo.dev/settings/access-tokens

name: EAS Staging Build (Android & IOS) (EAS)

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      run_ios:
        required: false
        type: boolean
        default: false
      run_android:
        required: false
        type: boolean
        default: true
      should_submit:
        required: false
        type: boolean
        default: false
      version:
        required: false
        type: string

jobs:
  setup:
    name: Setup Common Resources
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Check for EXPO_TOKEN
        run: |
          if [ -z "${{ secrets.EXPO_TOKEN_XRAY_ANALYZER }}" ]; then
            echo "You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions"
            exit 1
          fi
      - name: üì¶ Checkout project repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üì¶ Setup Node + PNPM + install deps
        uses: ./.github/actions/setup-node-pnpm-install

  ios_build:
    needs: setup
    if: ${{ inputs.run_ios }}
    name: iOS Build
    runs-on: macos-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node-pnpm-install

      - name: 'Load environment variables'
        run: |
          # Define the environment file name based on the input environment
          APP_ENV="production"
          ENV_FILE=".env.${APP_ENV}"

          # Create the environment file (use $ENV_FILE variable)
          touch $ENV_FILE

          # Export Google Services JSON secrets to the GitHub environment
          echo "GOOGLE_SERVICES_JSON_ANDROID_BASE64=${{ secrets.GOOGLE_SERVICES_JSON_ANDROID_BASE64 }}" >> $GITHUB_ENV
          echo "GOOGLE_SERVICES_PLIST_IOS_BASE64=${{ secrets.GOOGLE_SERVICES_PLIST_IOS_BASE64 }}" >> $GITHUB_ENV

          # Append environment variables to the defined env file
          echo "GOOGLE_SERVICES_JSON_PATH=${{ vars.GOOGLE_SERVICES_JSON_PATH }}" >> $ENV_FILE
          echo "GOOGLE_SERVICES_PLIST_PATH=${{ vars.GOOGLE_SERVICES_PLIST_PATH }}" >> $ENV_FILE
          echo "ANTHROPIC_API_KEY=${{secrets.ANTHROPIC_API_KEY}}" >> $ENV_FILE
          echo "RESEND_API_KEY=${{secrets.RESEND_API_KEY}}" >> $ENV_FILE
          echo "RESEND_SENDER_EMAIL=${{secrets.RESEND_SENDER_EMAIL}}" >> $ENV_FILE
          echo "RESEND_SENDER_EMAIL=${{secrets.TEST_ACCOUNT}}" >> $ENV_FILE
          echo "TEST_ACCOUNT=${{secrets.TEST_ACCOUNT}}" >> $ENV_FILE
          echo "REVENUE_CAT_API_KEYS_GOOGLE=${{secrets.REVENUE_CAT_API_KEYS_GOOGLE}}" >> $ENV_FILE
          echo "REVENUE_CAT_API_KEYS_APPLE=${{secrets.REVENUE_CAT_API_KEYS_APPLE}}" >> $ENV_FILE
          echo "ANALYZE_IMAGE_ENDPOINT=${{secrets.ANALYZE_IMAGE_ENDPOINT}}" >> $ENV_FILE
          echo "ANALYZE_VIDEO_ENDPOINT=${{secrets.ANALYZE_VIDEO_ENDPOINT}}" >> $ENV_FILE

      - name: üßë‚Äçüíª Decode google services
        run: pnpm run decode-google-services

      - name: ‚è±Ô∏è EAS Build iOS
        uses: ./.github/actions/eas-build
        with:
          APP_ENV: staging
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN_XRAY_ANALYZER }}
          VERSION: ${{ inputs.version }}
          FIREBASE_APP_ID_IOS: ${{ secrets.FIREBASE_APP_ID_IOS }}
          FIREBASE_APP_ID_ANDROID: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
          CREDENTIAL_FILE_CONTENT_GOOGLE_KEY: ${{ secrets.FIREBASE_DISTRIBUTION_CREDENTIAL_FILE_CONTENT}}
          ANDROID: false
          IOS: true
          SHOULD_SUBMIT: ${{ inputs.should_submit }}
          REVENUE_CAT_API_KEYS_GOOGLE: ${{ secrets.REVENUE_CAT_API_KEYS_GOOGLE }}
          REVENUE_CAT_API_KEYS_APPLE: ${{ secrets.REVENUE_CAT_API_KEYS_APPLE }}
          TEST_ACCOUNT: ${{ secrets.TEST_ACCOUNT }}
          ANALYZE_IMAGE_CONVERSATION_ENDPOINT: ${{ secrets.EXPO_PUBLIC_ANALYZE_IMAGE_CONVERSATION_ENDPOINT }}
          ANALYZE_VIDEO_CONVERSATION_ENDPOINT: ${{ secrets.EXPO_PUBLIC_ANALYZE_VIDEO_CONVERSATION_ENDPOINT }}
          CONTINUE_CONVERSATION_ENDPOINT: ${{ secrets.EXPO_PUBLIC_CONTINUE_CONVERSATION_ENDPOINT }}

  android_build:
    needs: setup
    if: ${{ inputs.run_android }}
    name: Android Build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node-pnpm-install

      - name: 'Load environment variables'
        run: |
          # Define the environment file name based on the input environment
          APP_ENV="production"
          ENV_FILE=".env.${APP_ENV}"

          # Create the environment file (use $ENV_FILE variable)
          touch $ENV_FILE

          # Export Google Services JSON secrets to the GitHub environment
          echo "GOOGLE_SERVICES_JSON_ANDROID_BASE64=${{ secrets.GOOGLE_SERVICES_JSON_ANDROID_BASE64 }}" >> $GITHUB_ENV
          echo "GOOGLE_SERVICES_PLIST_IOS_BASE64=${{ secrets.GOOGLE_SERVICES_PLIST_IOS_BASE64 }}" >> $GITHUB_ENV

          # Append environment variables to the defined env file
          echo "GOOGLE_SERVICES_JSON_PATH=${{ vars.GOOGLE_SERVICES_JSON_PATH }}" >> $ENV_FILE
          echo "GOOGLE_SERVICES_PLIST_PATH=${{ vars.GOOGLE_SERVICES_PLIST_PATH }}" >> $ENV_FILE
          echo "ANTHROPIC_API_KEY=${{secrets.ANTHROPIC_API_KEY}}" >> $ENV_FILE
          echo "RESEND_API_KEY=${{secrets.RESEND_API_KEY}}" >> $ENV_FILE
          echo "RESEND_SENDER_EMAIL=${{secrets.RESEND_SENDER_EMAIL}}" >> $ENV_FILE
          echo "TEST_ACCOUNT=${{secrets.TEST_ACCOUNT}}" >> $ENV_FILE
          echo "REVENUE_CAT_API_KEYS_GOOGLE=${{secrets.REVENUE_CAT_API_KEYS_GOOGLE}}" >> $ENV_FILE
          echo "REVENUE_CAT_API_KEYS_APPLE=${{secrets.REVENUE_CAT_API_KEYS_APPLE}}" >> $ENV_FILE
          echo "ANALYZE_IMAGE_ENDPOINT=${{secrets.ANALYZE_IMAGE_ENDPOINT}}" >> $ENV_FILE
          echo "ANALYZE_VIDEO_ENDPOINT=${{secrets.ANALYZE_VIDEO_ENDPOINT}}" >> $ENV_FILE

      - name: üßë‚Äçüíª Decode google services
        run: pnpm run decode-google-services

      - name: üì¶ Set Up JDK
        uses: ./.github/actions/setup-jdk-generate-apk
        with:
          APP_ENV: production

      - name: ‚è±Ô∏è EAS Build
        uses: ./.github/actions/eas-build
        with:
          APP_ENV: staging
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN_XRAY_ANALYZER }}
          VERSION: ${{ inputs.version }}
          FIREBASE_APP_ID_IOS: ${{ secrets.FIREBASE_APP_ID_IOS }}
          FIREBASE_APP_ID_ANDROID: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
          CREDENTIAL_FILE_CONTENT_GOOGLE_KEY: ${{ secrets.FIREBASE_DISTRIBUTION_CREDENTIAL_FILE_CONTENT}}
          ANDROID: true
          IOS: false
          SHOULD_SUBMIT: ${{ inputs.should_submit }}
          EXPO_PUBLIC_TEST_URL: ${{ secrets.EXPO_PUBLIC_TEST_URL }}
          REVENUE_CAT_API_KEYS_GOOGLE: ${{ secrets.REVENUE_CAT_API_KEYS_GOOGLE }}
          REVENUE_CAT_API_KEYS_APPLE: ${{ secrets.REVENUE_CAT_API_KEYS_APPLE }}
          TEST_ACCOUNT: ${{ secrets.TEST_ACCOUNT }}
          ANALYZE_IMAGE_CONVERSATION_ENDPOINT: ${{ secrets.EXPO_PUBLIC_ANALYZE_IMAGE_CONVERSATION_ENDPOINT }}
          ANALYZE_VIDEO_CONVERSATION_ENDPOINT: ${{ secrets.EXPO_PUBLIC_ANALYZE_VIDEO_CONVERSATION_ENDPOINT }}
          CONTINUE_CONVERSATION_ENDPOINT: ${{ secrets.EXPO_PUBLIC_CONTINUE_CONVERSATION_ENDPOINT }}
